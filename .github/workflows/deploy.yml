name: Lint and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      # 1. Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Установка Python 3.12
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # 3. Установка Poetry через скрипт
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # 4. Установка зависимостей
      - name: Install dependencies
        run: |
          poetry install

      # 5. Запуск линтера
      - name: Run linter (flake8)
        run: |
          poetry run flake8 app/

  deploy:
    runs-on: ubuntu-latest
    needs: lint

    env:
      TG_TOKEN: ${{ secrets.TG_TOKEN }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
      POLLER_REQUEST_TIMEOUT: ${{ vars.POLLER_REQUEST_TIMEOUT }}

    steps:
      # 1. Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Настройка SSH-доступа
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      # 3. Деплой на сервер
      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no perceptor@45.132.107.67 << 'EOF'
          set -e

          echo "Перехожу в директорию проекта..."
          cd /home/perceptor/projects/tg_budget

          echo "Обновляю код из репозитория..."
          git pull origin master

          echo "Останавливаю старые контейнеры..."
          docker-compose down

          echo "Собираю и запускаю новые контейнеры с переменными окружения..."
          export TG_TOKEN=${TG_TOKEN}
          export POSTGRES_USER=${POSTGRES_USER}
          export POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          export POSTGRES_DB=${POSTGRES_DB}
          export POSTGRES_HOST=${POSTGRES_HOST}
          export POLLER_REQUEST_TIMEOUT=${POLLER_REQUEST_TIMEOUT}
          docker compose up --build -d

          echo "Удаляю старые Docker-образы..."
          docker image prune -f

          EOF
